---
title: "Data Cleaning"
author: "Shonushka Sawant"
format: 
  html:
    self-contained: true
---

```{r, include=F}
#ONLY NEED TO RUN THIS ONCE THEN YOU CAN COMMENT IT OUT

install.packages("renv")
renv::init()

# <- shortcut is alt + -
# %>% shortcut is alt shift m
# |> no shortcut
```


```{r, include=F}
# Load necessary libraries
required_packages <- c("rvest", "dplyr", "tidyr", "rstatix", "ggplot2", "readr", "usmap", "plotly", "fable", "tsibble", "lubridate", "forecast", "png", "reticulate", "stringr", "htmlwidgets", "scales", "EpiSignalDetection", "prophet")

# Check for missing packages and install them if necessary
missing_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) install.packages(missing_packages, ask = F)

# Load all required packages
lapply(required_packages, library, character.only = TRUE)

renv::snapshot()
```



```{r}
mmr_cov <- read.csv("USA/data/all/measles-USA-by-mmr-coverage.csv")
head(mmr_cov)
```


```{r}
drop_na.tbl_ts <- function(ts)  tsibble::as_tsibble(tidyr:::drop_na.data.frame(ts))
```

```{r}

#drop rows with NA for vaccine percentage
mmr_cov <- mmr_cov %>% drop_na(estimate_pct)

#create a column with percent cast to numeric
mmr_cov$num_pct <- mmr_cov$estimate_pct

mmr_cov$num_pct <- as.numeric(sub("%","",mmr_cov$num_pct))/100
```

```{r}
#summary statistics for vaccine coverage, per state
group_by(mmr_cov, geography) %>% 
  get_summary_stats(num_pct)
```

```{r}
head(mmr_cov)
```

```{r}
#summary statistics for vaccine coverage, per year
summ_year <- group_by(mmr_cov, school_year) %>% 
  get_summary_stats(num_pct)

summ_year
```

```{r}
#plot median vaccination rate by year

summ_year %>%
  tail(10) %>%
  ggplot( aes(x=school_year, y=median)) +
    geom_line(color="black") +
    geom_point()
```

Median vaccination rates among states in the USA appear to be showing a downward trend starting from the 2019-20200 school year. We will now look at the trajectories for the states with the lowest vaccination rates in 2023-2024.

```{r}
mmr_cov2023 <- mmr_cov %>% filter(school_year == "2023-24")
head(mmr_cov2023 %>% arrange(num_pct))
```

The states with the five lowest vaccination rates are Idaho (79.6%), Alaska (84.3%), Wisconsin (84.8%), Minnesota (87.0%), and Florida (88.1%).

Compare these rates to the 2009-10 school year:

```{r}
low_2023 <- c("Idaho", "Alaska", "Wisconsin", "Minnesota", "Florida")
mmr_cov2009 <- mmr_cov %>% filter(geography %in% low_2023, school_year == "2009-10")
mmr_cov2009 %>% arrange(num_pct)
```

Vaccination rates for these states were notably higher in 2009-10 (excepting Alaska, which did not report its vaccination rate that year.)

```{r}
mmr_cov_low <- mmr_cov %>% filter(geography %in% low_2023)
ggplot(mmr_cov_low, aes(geography, num_pct, fill = geography)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  guides(fill = "none") +
  labs(
    x = "", 
    y = "Vaccination Rate",
    title = "Vaccination Variation by State (2023-2024)",
    subtitle = "States with Lowest Vaccination Rates"
  ) +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12))

```

Wisconsin and Alaska show the greatest variation in vaccination rates, of the five states with the lowest rates in 2023-24.

```{r}
#at this point we will add a numeric column for the dates.
mmr_cov$num_years <- substr(mmr_cov$school_year, 1, 4)
mmr_cov$num_years <- as.numeric(mmr_cov$num_years)

head(mmr_cov)
```

```{r}
#fitting linear mixed effects model.
#this is inaccurate, just for practice with lmer for now.
library(lme4)
lin_0 <- lmer(num_years ~ 1 + (1 | geography), data = mmr_cov)
summary(lin_0)
```

```{r}
library(Epi)
ci.lin(lin_0)
```

```{r}
mmr_cov %>%
  filter(geography %in% low_2023) %>%
  ggplot(aes(school_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2015-2024)",
       y = "Vaccination rate", x = "Year")
```




```{r}
state_vax <- mmr_cov %>%
  filter(school_year == "2023-24") %>%
  group_by(state = geography) %>%
  summarize(mean_vax = mean(num_pct))

plot_usmap(data = state_vax, values = "mean_vax", color = "white") +
  scale_fill_continuous(low = "red", high = "green", name = "Vaccination %") +
  labs(title = "Measles Vaccination Rates by State, 2023") +
  theme(legend.postion = "right")
```


```{r setup, message=FALSE, warning=FALSE}
state_lookup <- tibble(
  state = state.name,
  abbr  = state.abb
)

vax_yearly <- mmr_cov %>%
  mutate(year = as.integer(substr(school_year, 1, 4))) %>%
  group_by(state = geography, year) %>%
  summarize(mean_vax = mean(num_pct, na.rm = TRUE), .groups = "drop") %>%
  left_join(state_lookup, by = "state") %>%
  filter(!is.na(abbr))  


fig_map <- plot_geo(vax_yearly, locationmode='USA-states') %>%
  add_trace(
    z          = ~mean_vax,
    locations  = ~abbr,
    frame      = ~year,
    customdata = ~year,
    hovertemplate = paste0(
      "%{location}<br>",
      "Year: %{customdata}<br>",
      "Vaccination: %{z:.1%}",
      "<extra></extra>"
    ),
    colorscale = 'Viridis',
    zmin       = 0.75, zmax = 1,
    marker     = list(line = list(color='white', width=0.5))
  ) %>%
  layout(
    title = list(text="Measles Vaccination Rates (2009–2023)", x=0.5),
    geo   = list(scope='usa'),
    updatemenus = list(
      list(
        type    = "buttons",
        x       = 1.1,  y = 0,
        showactive = FALSE,
        buttons = list(
          list(method = "animate",
               args   = list(NULL, 
                             list(frame = list(duration = 500, redraw = FALSE),
                                  transition = list(duration = 0),
                                  fromcurrent = TRUE,
                                  mode = "immediate")),
               label  = "▶ Play")
        )
      )
    )
  )

fig_map

cum_df <- vax_yearly %>%
  arrange(state, year) %>%
  group_by(state) %>%
  mutate(cum_avg = cummean(mean_vax))

fig_cum <- plot_ly(
    cum_df,
    x = ~year,
    y = ~cum_avg,
    color = ~state,
    type  = 'scatter',
    mode  = 'lines',
    hoverinfo = 'text',
    text = ~paste0(state, ": ", scales::percent(cum_avg, accuracy = 0.1))
  ) %>%
  layout(
    title = "Cumulative Average Vaccination Rate by State",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Cumulative Avg (%)")
  )

fig_cum
```

```{r}
print(fig_map)
```

```{r}
state_avg <- vax_yearly %>%
  group_by(state, abbr) %>%
  summarize(overall_avg = mean(mean_vax, na.rm = TRUE), .groups="drop") %>%
  arrange(desc(overall_avg))

fig_avg <- plot_ly(
  state_avg,
  x = ~reorder(abbr, overall_avg),
  y = ~overall_avg,
  type = 'bar',
  marker = list(
    color = ~overall_avg,
    colorscale = 'Viridis',
    cmin = min(state_avg$overall_avg),
    cmax = max(state_avg$overall_avg)
  ),
  hoverinfo = 'text',
  text = ~paste0(state, ": ", percent(overall_avg, accuracy = 0.1))
) %>%
  layout(
    title = "Average Measles Vaccination Rate by State (2009–2023)",
    xaxis = list(title = "State", tickangle = -45),
    yaxis = list(title = "Avg Vaccination Rate",
                 range = c(0.75, 1),
                 tickformat = ".0%"),
    margin = list(b = 80)
  )

fig_avg
```


```{r average-map, echo=FALSE, message=FALSE, warning=FALSE}


fig_avg_map <- plot_geo(state_avg, locationmode = 'USA-states') %>%
  add_trace(
    z          = ~overall_avg,
    locations  = ~abbr,
    colorscale = 'Viridis',
    zmin       = 0.75,
    zmax       = 1,
    marker     = list(line = list(color = 'white', width = 0.5)),
    customdata = ~overall_avg,
    hovertemplate = paste0(
      "%{location}<br>",
      "Avg Vaccination: %{customdata:.1%}<extra></extra>"
    ),
    colorbar = list(title = "Avg Vaccination", tickformat = ".0%")
  ) %>%
  layout(
    title = list(text = "Average Measles Vaccination Rate by State (2009–2023)", x = 0.5),
    geo   = list(scope = 'usa')
  )

fig_avg_map

```


```{r}
print(fig_cum)
```


```{r}
ts_vax <- mmr_cov %>%
  filter(geography %in% low_2023) %>%
  mutate(
    year = as.integer(substr(school_year, 1, 4))
  ) %>%
  group_by(year) %>%
  summarize(mean_vax = mean(num_pct, na.rm = TRUE)) %>%
  ungroup() %>%
  # explicitly fill any missing year between min and max
  complete(year = seq(min(year), max(year), by = 1)) %>%
  as_tsibble(index = year)

# now every year in the span is present (missing mean_vax will be NA)
fit <- ts_vax %>% model(ETS(mean_vax))
fc  <- forecast(fit, h = 2)

autoplot(ts_vax, mean_vax) +
  autolayer(fc, .mean) +
  labs(
    title = "Forecasted Vaccination Rates (2025–2026)",
    x = "Year",
    y = "Mean Vaccination Rate"
  )

```

```{r}

# build a plain ts-series with frequency = 1 (annual)
vax_ts <- ts(
  data      = ts_vax$mean_vax,
  start     = min(ts_vax$year),
  frequency = 1
)

fc <- forecast(ets(vax_ts), h = 2)
autoplot(fc) +
  labs(
    title = "Forecasted Vaccination Rates (2025–2026)",
    x     = "Year",
    y     = "Mean Vaccination Rate"
  )


```

```{r}
ts_vax_fable <- mmr_cov %>%
  filter(geography %in% low_2023) %>%
  mutate(year = as.integer(substr(school_year,1,4))) %>%
  group_by(year) %>%
  summarize(mean_vax = mean(num_pct, na.rm = TRUE)) %>%
  ungroup() %>%
  complete(year = seq(min(year), max(year), by = 1)) %>%
  as_tsibble(index = year) %>%
  # simple linear interpolation for the missing years
  mutate(mean_vax = approx(year[!is.na(mean_vax)],
                           mean_vax[!is.na(mean_vax)],
                           xout = year)$y)

fit_fbl <- ts_vax_fable %>% model(ETS(mean_vax))
fc_fbl  <- forecast(fit_fbl, h = 2)

autoplot(fc_fbl) +
  labs(title = "Forecasted Vaccination Rates (2025–2026)")

```

```{r}
# 1) Build one annual series per state, and fill implicit gaps
ts_states <- mmr_cov %>%
  mutate(year = as.integer(substr(school_year, 1, 4))) %>%
  group_by(geography, year) %>%
  summarize(mean_vax = mean(num_pct, na.rm = TRUE), .groups="drop") %>%
  as_tsibble(key = geography, index = year) %>%
  # make every year explicit (2009:2023), with NA where missing
  fill_gaps() %>%
  # simple linear interpolation of those NAs (you could also choose carry-forward, etc.)
  group_by_key() %>%
  mutate(
    mean_vax = approx(
      x    = year[!is.na(mean_vax)],
      y    = mean_vax[!is.na(mean_vax)],
      xout = year,
      rule = 2
    )$y
  ) %>%
  ungroup()

# 2) Fit ETS to each state
models <- ts_states %>%
  model(ETS = ETS(mean_vax))

# 3) Forecast two years ahead
fc_states <- models %>%
  forecast(h = 2)

autoplot(fc_states) +
  labs(
    title = "Vaccination Trends (2009–2023) and Forecast (2025–26)",
    x     = "Year",
    y     = "Mean Vaccination Rate"
  ) +
  facet_wrap(~ geography) +
  theme_minimal()
```

::: {style="max-height:800px; overflow-y:auto;"}
```{r, fig.width=12, fig.height=20, echo=FALSE}
library(ggplot2)

autoplot(fc_states) +
  labs(
    title = "Vaccination Trends (2009–2023) and Forecast (2025–26)",
    x     = "Year", 
    y     = "Mean Vaccination Rate"
  ) +
  facet_wrap(~ geography, ncol = 5) +
  theme_minimal() +
  theme(
    strip.text = element_text(size=8),
    panel.spacing = unit(0.3, "lines")
  )
```

```{r}
fc_states %>%
  as_tibble() %>%
  filter(year >= 2025) %>%
  select(
    geography,
    year,
    point = .mean
  )
```

Adding graphs for how each region has changed from 2009 to 2023.

```{r}
#at this point we will add a numeric column for the dates.
mmr_cov$first_year <- substr(mmr_cov$school_year, 1, 4)
mmr_cov$num_years <- as.numeric(mmr_cov$first_year)

head(mmr_cov)
```


```{r}
new_england <- c("Connecticut", "Maine", "Massachusetts", " New Hampshire",
                 " Rhode Island", "Vermont")
middle_atlantic <- c("New Jersey", "New York", "Pennsylvania")

east_north_central <- c("Indiana", "Illinois", "Michigan", "Ohio", "Wisconsin")
west_north_central <- c("Iowa", "Kansas", "Missouri", "Minnesota", "Nebraska",
                        "North Dakota", "South Dakota")

south_atlantic <- c("Delaware", " District of Columbia", "Florida", "Georgia",
                    "Maryland", " North Carolina",  "South Carolina", "Virginia",
                    "West Virginia")
east_south_central <- c("Alabama", "Kentucky", "Mississippi", "Tennessee")
west_south_central <- c("Arkansas", "Louisiana", "Oklahoma", "Texas")

mountain <- c("Arizona", "Colorado", "Idaho", "New Mexico", "Montana",
              "Utah", "Nevada", "Wyoming")
pacific <- c("Alaska", "California", "Hawaii", "Oregon", "Washington")

```


```{r}
#rates for new england
mmr_cov %>%
  filter(geography %in% new_england) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): New England",
       y = "Vaccination rate", x = "Year")
```

```{r}
#rates for middle atlantic
mmr_cov %>%
  filter(geography %in% middle_atlantic) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): Middle Atlantic",
       y = "Vaccination rate", x = "Year")
```

```{r}

#rates for east north central
mmr_cov %>%
  filter(geography %in% east_north_central) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024: East North Central)",
       y = "Vaccination rate", x = "Year")

```

```{r}
mmr_cov %>%
  filter(geography %in% west_north_central) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): West North Central",
       y = "Vaccination rate", x = "Year")
```

```{r}
mmr_cov %>%
  filter(geography %in% south_atlantic) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): South Atlantic",
       y = "Vaccination rate", x = "Year")
```

```{r}
mmr_cov %>%
  filter(geography %in% east_south_central) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): East South Central",
       y = "Vaccination rate", x = "Year")
```


```{r}
mmr_cov %>%
  filter(geography %in% west_south_central) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): West South Central",
       y = "Vaccination rate", x = "Year")
```

```{r}
mmr_cov %>%
  filter(geography %in% mountain) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): Mountain",
       y = "Vaccination rate", x = "Year")
```

```{r}
mmr_cov %>%
  filter(geography %in% pacific) %>%
  ggplot(aes(first_year, num_pct, color = geography, group = geography)) +
  geom_line() + geom_point() +
  labs(title = "Trends in Vaccination Rates (2009-2024): Pacific",
       y = "Vaccination rate", x = "Year")
```



# EpisignalDetection


```{r}



atlas_raw   <- importAtlasExport("EpiSignalDetection/data/dataset.csv")
atlas_clean <- cleanAtlasExport(atlas_raw)

#–– 3. Subset manually with dplyr ––
sub <- atlas_clean %>%
  filter(
    HealthTopic == "Measles",
    Indicator   == "Reported cases",
    Population  == "All cases",
    RegionName  == "Africa"
  ) %>%
  # convert the Time string to Date for stsSD()
  mutate(StudyPeriod = as.Date(Time)) %>%
  arrange(StudyPeriod)

#–– 4. Build the sts object ––
sts_obj <- stsSD(
  observedCases = sub$NumValue,
  studyPeriod   = sub$StudyPeriod,
  timeUnit      = "Month",
  startYM       = c(
    as.integer(format(sub$StudyPeriod[1], "%Y")),
    as.integer(format(sub$StudyPeriod[1], "%m"))
  )
)

#–– 5. Run Farrington on the last 12 months ––
res <- algoSD(
  sts_obj,
  algo          = "FarringtonFlexible",
  timeUnit      = "Month",
  testingPeriod = 12
)

#–– 6. Plot your signals ––
plotSD(sts_obj, res) +
  ggtitle("Measles in Africa: Last 12 Months (Farrington)")

```


```{r}
#THIS IS THE ONE THAT WORKS

# Farrington-Fleixible is an aberration detector (flags past months that exceed expected bounds)


df <- read.csv("EpiSignalDetection/data/dataset.csv", stringsAsFactors = FALSE) %>%
  mutate(
    Time = as.Date(paste0(Time, "-01"))
  )

print(unique(df$RegionName))


sub <- df %>%
  filter(
    HealthTopic == "Measles",
    Indicator   == "Reported cases",
    Population  == "All cases",
    RegionName  == "Africa"
  ) %>%
  arrange(Time)


sts <- stsSD(
  observedCases = sub$NumValue,
  studyPeriod   = sub$Time,
  timeUnit      = "Month",
  startYM       = c(
    as.integer(format(min(sub$Time), "%Y")),
    as.integer(format(min(sub$Time), "%m"))
  )
)

res <- algoSD(
  sts,
  algo          = "FarringtonFlexible",
  timeUnit      = "Month",
  testingPeriod = 12
)

plot_df <- data.frame(
  Time     = sub$Time,
  Observed = sub$NumValue,
  Alarm    = as.logical(res@alarm)
)

ggplot(plot_df, aes(x=Time, y=Observed)) +
  geom_line() +
  geom_point(
    data = plot_df[plot_df$Alarm, ],
    aes(x=Time, y=Observed),
    color = "red",
    size  = 2
  ) +
  labs(
    title = "Measles in Africa: Farrington Signals (last 12 months)",
    x     = "Month",
    y     = "Reported cases"
  ) +
  theme_minimal()

# No red points on the graph: Farrington-Flexible didn't flag any high months the final year
# Clear trend of annual cycles. If we want to spot that historically increase testingPeriod to test more months

# Things to add:
#     Overelay thresholds/upper limits. How close do normal months come to warning boundaries
#     adjust sensitivity by changing alpha or b/w parameters in AlgoParam()

```

```{r}


df_long <- read.csv("EpiSignalDetection/data/dataset.csv", stringsAsFactors = FALSE) %>%
  mutate(
    TimeDate  = as.Date(paste0(Time, "-01")),
    Year      = as.integer(format(TimeDate, "%Y")),
    MonthName = month.name[as.integer(format(TimeDate, "%m"))]
  )


atlas_wide <- df_long %>%
  select(
    Country   = RegionName,
    Year,
    MonthName,
    Count     = NumValue
  ) %>%
  pivot_wider(
    names_from  = MonthName,
    values_from = Count
  ) %>%
  select(Country, Year, all_of(month.name))


out_file <- file.path(getwd(), "atlas_export_measles.csv")
write.csv(atlas_wide, out_file, row.names = FALSE)
cat("Wrote Atlas export CSV to:\n", out_file, "\n")


my_input <- list(
  file           = list(datapath      = out_file),
  disease        = "Measles",
  country        = "Africa",
  indicator      = "Reported cases",
  stratification = "All cases",
  unit           = "Month",
  daterange      = c(
    format(min(df_long$TimeDate), "%Y-%m-%d"),
    format(max(df_long$TimeDate), "%Y-%m-%d")
  ),
  algo           = "FarringtonFlexible",
  testingperiod  = 12
)


EpiSignalDetection::runEpiSDReport(input = my_input)
```

```{r}
# Does R even see the file?
if (!file.exists(my_input$file$datapath)) stop("File not found: ", my_input$file$datapath)
# Is it the right format?
readLines(my_input$file$datapath, n = 5)

```


```{r}
EpiSignalDetection::runEpiSDApp()
```


```{r}


#–– 1. Read your cleaned CSV and turn “YYYY-MM” into a Date ––
df <- read.csv("EpiSignalDetection/data/dataset.csv", stringsAsFactors = FALSE) %>%
  mutate(
    Time = as.Date(paste0(Time, "-01"))
  )

#–– 2. (Optional) See what regions are available ––
print(unique(df$RegionName))

#–– 3. Subset to Measles “All cases” in Africa ––
sub <- df %>%
  filter(
    HealthTopic == "Measles",
    Indicator   == "Reported cases",
    Population  == "All cases",
    RegionName  == "Africa"
  ) %>%
  arrange(Time)

#–– 4. Build the sts (surveillance) object ––
sts <- stsSD(
  observedCases = sub$NumValue,
  studyPeriod   = sub$Time,
  timeUnit      = "Month",
  startYM       = c(
    as.integer(format(min(sub$Time), "%Y")),
    as.integer(format(min(sub$Time), "%m"))
  )
)

#–– 5. Run the Farrington‐Flexible detector on the last 12 months ––
res <- algoSD(
  sts,
  algo          = "FarringtonFlexible",
  timeUnit      = "Month",
  testingPeriod = 12
)

library(ggplot2)

# grab your times, counts, and which months were flagged
plot_df <- data.frame(
  Time     = sub$Time,
  Observed = sub$NumValue,
  Alarm    = as.logical(res@alarm)
)

ggplot(plot_df, aes(x=Time, y=Observed)) +
  geom_line() +
  geom_point(
    data = plot_df[plot_df$Alarm, ],
    aes(x=Time, y=Observed),
    color = "red",
    size  = 2
  ) +
  labs(
    title = "Measles in Africa: Farrington Signals (last 12 months)",
    x     = "Month",
    y     = "Reported cases"
  ) +
  theme_minimal()

```





```{r}
raw <- read.csv("Measles_Global.csv", stringsAsFactors = FALSE)

# Pivot Jan–Dec → long form, and build full-date Time = "YYYY-MM-01"
df_monthly <- raw %>%
  pivot_longer(
    cols      = January:December,
    names_to  = "Month",
    values_to = "NumValue"
  ) %>%
  mutate(
    Year       = as.integer(Year),
    MonthNum   = match(Month, month.name),                   # 1–12
    Time       = sprintf("%d-%02d-01", Year, MonthNum),      # "YYYY-MM-01"
    RegionName = Country                                      # match the package
  ) %>%
  transmute(
    HealthTopic  = "Measles",
    Population   = "All cases",
    Indicator    = "Reported cases",
    Unit         = "N",
    Time,                                                    # "YYYY-MM-01"
    RegionName,
    NumValue
  )

# Inspect your Time values
head(df_monthly$Time); tail(df_monthly$Time)


write.csv(df_monthly, "USA/data/all/measles_US_monthly_full.csv", row.names = FALSE)

# Define the input list, **not including** the file argument
my_input <- list(
  disease        = "Measles",
  country        = "EU-EEA - complete series",    # this region *is* in SignalData
  indicator      = "Reported cases",
  stratification = "All cases",
  unit           = "Month",                       # must be "Month" or "Week"
  daterange      = c("1999-01-01", "2018-12-31"), # full YYYY-MM-DD strings
  algo           = "FarringtonFlexible",
  testingperiod  = 12                             # last 12 months
)

# Run
plotSD(input = my_input)
```



```{r}
# Currently not working
EpiSignalDetection::runEpiSDReport(
  outputfile = "measles_US_signals_report.html",
  input      = my_input,
  stratified = FALSE    # or TRUE to break out by Population
)


```



```{r}
EpiSignalDetection::runEpiSDApp()
```











```{r}

eur <- read_csv("Measles_Europe.csv", show_col_types = FALSE) %>%
  select(HealthTopic, Population, Indicator, Unit, Time, RegionName, NumValue) %>%
  mutate(
    Time     = paste0(as.integer(Time), "-01-01"),
    NumValue = as.numeric(NumValue)
  )


usa <- read_csv("USA/data/all/measles-USA-by-year.csv", show_col_types = FALSE) %>%
  transmute(
    HealthTopic    = "Measles",
    Population     = "All ages",
    Indicator      = "Reported cases",
    Unit           = "Count",
    Time           = paste0(year, "-01-01"),
    RegionName     = "United States",
    NumValue       = as.numeric(cases)
  )


both <- bind_rows(eur, usa)
write_csv(both, "measles_EU_US_combined.csv")

combined_csv <- normalizePath("measles_EU_US_combined.csv",
                              winslash = "/",
                              mustWork = TRUE)


esd_input <- list(
  file           = list(datapath = combined_csv),
  disease        = "Measles",
  country        = "All",            
  indicator      = "Reported cases",
  stratification = "All ages",
  unit           = "Year",
  daterange      = c("2007-01-01", "2023-12-31"),
  algo           = "FarringtonFlexible",
  testingperiod  = 5
)


runEpiSDReport(
  esd_input,
  stratified  = FALSE,
  outputfile  = "measles_EU_US_signal_report.html",
  run_pandoc  = TRUE
)


```

# Forecasting

```{r}

# 1. Build a ts object from your monthly counts
#    start = c(year, month) of the first observation
ts_data <- ts(
  sub$NumValue,
  start     = c(as.integer(format(min(sub$Time), "%Y")),
                as.integer(format(min(sub$Time), "%m"))),
  frequency = 12
)

# 2. Fit an ETS model and forecast 12 months ahead
fit_ets    <- ets(ts_data)
fc_ets     <- forecast(fit_ets, h = 12)

# 3. Fit an ARIMA model and forecast 12 months ahead
fit_ari    <- auto.arima(ts_data)
fc_ari     <- forecast(fit_ari, h = 12)

# 4. Plot both forecasts side by side
autoplot(ts_data) +
  autolayer(fc_ets,  series = "ETS forecast") +
  autolayer(fc_ari,  series = "ARIMA forecast") +
  labs(
    title = "Forecasting Measles in Africa (next 12 months)",
    x     = "Year",
    y     = "Reported cases"
  ) +
  scale_colour_manual(
    values = c("ETS forecast" = "blue", "ARIMA forecast" = "red"),
    breaks = c("ETS forecast", "ARIMA forecast")
  ) +
  theme_minimal()

# ETS: produce a smoother, more “level” forecast that pulls back any trend to its error-trend-seasonality decomposition
# ARIMA pick up subtle autocorrelations and may trend differently

```

```{r}
# build ts_data, fit fc_ets & fc_ari as before…

autoplot(ts_data) +
  # 1) draw ARIMA **first**, including its PI
  autolayer(fc_ari, series = "ARIMA forecast") +
  # 2) then draw ETS **on top**, with its PI
  autolayer(fc_ets, series = "ETS forecast") +
  # 3) now manually map both line colours and ribbon fills
  scale_colour_manual(
    values = c("ETS forecast"   = "blue",
               "ARIMA forecast" = "red")
  ) +
  scale_fill_manual(
    values = c("ETS forecast"   = scales::alpha("blue",  0.2),
               "ARIMA forecast" = scales::alpha("red",   0.2))
  ) +
  labs(
    title =  "Forecasting Measles in Africa (next 12 months)",
    x     =  "Year",
    y     =  "Reported cases"
  ) +
  theme_minimal()

```


```{r}
library(prophet)
df_prophet <- sub %>%
  transmute(ds = Time, y = NumValue)
m <- prophet(df_prophet)
future <- make_future_dataframe(m, periods = 12, freq = "month")
fc  <- predict(m, future)
plot(m, fc)

```



```{r correlation-vax-cases, message=FALSE, warning=FALSE}

case_us <- read.csv("USA/data/all/measles-USA-by-year.csv", 
                    stringsAsFactors = FALSE) %>%
  transmute(
    year  = as.integer(year),
    cases = as.numeric(cases)
  )


vax_us_national <- mmr_cov %>%
  mutate(year = as.integer(substr(school_year, 1, 4))) %>%
  group_by(year) %>%
  summarize(
    national_vax = mean(num_pct, na.rm = TRUE),
    .groups = "drop"
  )


cor_df <- inner_join(case_us, vax_us_national, by = "year")


pearson_r <- cor(cor_df$national_vax, cor_df$cases, 
                 method = "pearson", use = "complete.obs")
corr_test <- cor.test(cor_df$national_vax, cor_df$cases)


print(cor_df)
cat(sprintf("Pearson r = %.3f\n\n", pearson_r))
print(corr_test)


library(ggplot2)
ggplot(cor_df, aes(x = national_vax, y = cases)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE) +
  labs(
    title = "Correlation: National MMR Coverage vs Measles Cases in the US",
    x     = "Mean MMR Vaccination Rate",
    y     = "Reported Measles Cases"
  ) +
  theme_minimal()

# 1. Loads **case_us** from your yearly case‐counts CSV.  
# 2. Aggregates **mmr_cov** into **vax_us_national**, the mean MMR rate per year.  
# 3. Joins them on `year` into **cor_df**.  
# 4. Calculates **Pearson’s r** and performs `cor.test()`.  
# 5. Prints the combined table plus correlation stats.  
# 6. Plots a scatter with a fitted regression line so you can see how lower vaccination rates relate to higher case counts.
```

```{r correlation-vax-cases-weighted, message=FALSE, warning=FALSE}

# 1. Read US measles case counts by year
case_us <- read.csv("USA/data/all/measles-USA-by-year.csv",
                    stringsAsFactors = FALSE) %>%
  transmute(
    year  = as.integer(year),
    cases = as.numeric(cases)
  )

# 2. Compute a population-weighted national MMR rate
#    (using the population_size column in mmr_cov)
vax_us_weighted <- mmr_cov %>%
  mutate(year = as.integer(substr(school_year, 1, 4))) %>%
  group_by(year, geography) %>%
  summarize(
    state_vax   = mean(num_pct, na.rm = TRUE),
    population  = first(population_size),
    .groups     = "drop"
  ) %>%
  group_by(year) %>%
  summarize(
    national_vax = sum(state_vax * population) / sum(population),
    .groups      = "drop"
  )

# 3. Join cases and weighted vaccination rates
cor_df <- inner_join(case_us, vax_us_weighted, by = "year")

# 4. Compute Pearson’s r and run the test
pearson_r <- cor(cor_df$national_vax, cor_df$cases, method = "pearson")
corr_test <- cor.test(cor_df$national_vax, cor_df$cases)

# 5. Print results
print(cor_df)
cat(sprintf("Pearson r = %.3f\n\n", pearson_r))
print(corr_test)

# 6. Scatterplot with regression line
ggplot(cor_df, aes(x = national_vax, y = cases)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE) +
  labs(
    title = "Weighted National MMR Coverage vs Measles Cases (US)",
    x     = "Population-weighted MMR Rate",
    y     = "Annual Measles Cases"
  ) +
  theme_minimal()

```

